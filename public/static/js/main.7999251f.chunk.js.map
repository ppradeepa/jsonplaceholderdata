{"version":3,"sources":["components/Navbar.js","actions/types.js","reducers/postReducer.js","context/PostContext.js","components/AutoSearch.js","components/PostDetails.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","Navbar","classes","useTheme","className","CssBaseline","Toolbar","Typography","variant","noWrap","GET_POST","EDIT_POST","REMOVE_POST","SEARCH_POST","SET_POST_COUNT","GET_POST_COUNT","SUCCESS_CALL_API","ERROR_CALL_API","INITIAL_STATE","loading","postDetails","error","postReducer","state","action","postdata","data","type","actionTypes","filter","post","id","UPDATE_POST","updatedPost","map","e","title","includes","PostContext","createContext","PostContextProvider","props","useReducer","dispatch","useEffect","axios","get","then","response","status","catch","Provider","value","getpost","searchpost","updatepost","removepost","editpost","children","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","AutoSearch","useContext","Grid","container","item","xs","Paper","length","Autocomplete","onInputChange","event","options","renderInput","params","TextField","label","margin","fullWidth","InputProps","marginBottom","fontSize","card","maxWidth","transition","boxShadow","media","paddingTop","content","divider","heading","fontWeight","subheading","lineHeight","PostDetails","useState","setSelecteDelete","show","setShow","setOpen","selected","setSelected","handleInputChange","target","name","Card","CardContent","gutterBottom","component","Divider","body","CardActions","Button","onClick","handleEdit","Dialog","open","DialogTitle","DialogContent","justify","alignItems","autoComplete","onChange","DialogActions","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7999251f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { AppBar, Toolbar, Typography, CssBaseline } from \"@material-ui/core\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  }\r\n}));\r\nconst Navbar = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n        <Toolbar >\r\n          <Typography variant=\"h6\" noWrap>\r\n            JSONPlaceHOlder\r\n          </Typography>\r\n        </Toolbar>\r\n    \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","export default {\r\n    GET_POST: 'GET_POST',\r\n    EDIT_POST : 'EDIT_POST',\r\n    REMOVE_POST: 'REMOVE_POST',\r\n    SEARCH_POST: 'SET_POST_COUNT',\r\n    SET_POST_COUNT: 'SET_POST_COUNT',\r\n    GET_POST_COUNT:'GET_POST_COUNT',\r\n    SUCCESS_CALL_API:'SUCCESS_CALL_API',\r\n    ERROR_CALL_API:'ERROR_CALL_API'\r\n  };","import actionTypes from \"../actions/types\";\r\n\r\nexport const INITIAL_STATE = {\r\n  loading: false,\r\n  postDetails: \"\",\r\n  error: null,\r\n};\r\n\r\nexport default function postReducer(state = INITIAL_STATE, action) {\r\n  const postdata = action.data;\r\n  switch (action.type) {\r\n    case actionTypes.SUCCESS_CALL_API: {\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    }\r\n    \r\n    case actionTypes.GET_POST: {\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        postDetails: postdata,\r\n      };\r\n    }\r\n\r\n    case actionTypes.EDIT_POST:\r\n      return {\r\n        ...state,\r\n        postDetails: postdata,\r\n      };\r\n\r\n    case actionTypes.REMOVE_POST:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        postDetails: state.postDetails.filter(\r\n          (post) => post.id !== postdata\r\n        ),\r\n      };\r\n\r\n    case actionTypes.UPDATE_POST:\r\n      const updatedPost = state.postDetails.map((post) => {\r\n        if (post.id === postdata.id) {\r\n          return postdata;\r\n        }\r\n        return post;\r\n      });\r\n      return {\r\n        ...state,\r\n        postDetails: updatedPost,\r\n      };\r\n\r\n    case actionTypes.SEARCH_POST:\r\n      return {\r\n        ...state,\r\n        postDetails: state.postDetails.filter((e) =>\r\n          e.title.includes(postdata)\r\n        ),\r\n      };\r\n\r\n    case actionTypes.ERROR_CALL_API: {\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: action.error,\r\n      };\r\n    }\r\n  }\r\n}\r\n","import React, { createContext, useState, useReducer, useEffect } from \"react\";\r\nimport actionTypes from \"../actions/types\";\r\nimport postReducer, { INITIAL_STATE } from \"../reducers/postReducer\";\r\nimport axios from \"axios\";\r\n\r\nexport const PostContext = createContext(INITIAL_STATE);\r\n\r\nconst PostContextProvider = (props) => {\r\n  const [state, dispatch] = useReducer(postReducer, INITIAL_STATE);\r\n  const { postDetails, loading, error } = state;\r\n  const editpost = (post) => {\r\n    dispatch({ type: actionTypes.EDIT_POST, data: post });\r\n  };\r\n\r\n  const removepost = (id) => {\r\n    dispatch({ type: actionTypes.REMOVE_POST, data: id });\r\n  };\r\n\r\n  const getpost = (post) => {\r\n    dispatch({ type: actionTypes.GET_POST, data: post });\r\n  };\r\n\r\n  const searchpost = (post) => {\r\n    dispatch({ type: actionTypes.SEARCH_POST, data: post });\r\n  };\r\n\r\n  const updatepost = (post) => {\r\n    dispatch({ type: actionTypes.UPDATE_POST, data: post });\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: actionTypes.SUCCESS_CALL_API });\r\n    axios\r\n      .get(\"/post\")\r\n      .then((response) => {\r\n        if (response.status == 200) {\r\n          dispatch({ type: actionTypes.GET_POST, data: response.data });\r\n          return;\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        dispatch({ type: actionTypes.ERROR_CALL_API, error: error });\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <PostContext.Provider\r\n      value={{\r\n        post: state.postDetails,\r\n        getpost,\r\n        searchpost,\r\n        updatepost,\r\n        removepost,\r\n        editpost,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </PostContext.Provider>\r\n  );\r\n};\r\n\r\nexport default PostContextProvider;\r\n","import React, { useContext, useState } from \"react\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport { PostContext } from \"../context/PostContext\";\r\n\r\nimport { Grid, makeStyles, TextField, Paper } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary,\r\n  },\r\n}));\r\nconst AutoSearch = () => {\r\n  const { post, searchpost } = useContext(PostContext);\r\n  const classes = useStyles();\r\n\r\n  const handleInputChange = (event, value) => {\r\n    searchpost(value);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12}>\r\n          <Paper className={classes.paper}>\r\n            {post.length > 0 ? (\r\n              <Autocomplete\r\n                onInputChange={handleInputChange}\r\n                options={post.map((post) => post.title)}\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    {...params}\r\n                    label=\"Search\"\r\n                    id=\"limoText\"\r\n                    margin=\"normal\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    InputProps={{ ...params.InputProps, type: \"search\" }}\r\n                  />\r\n                )}\r\n              />\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AutoSearch;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport AutoSearch from \"./AutoSearch\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  AppBar,\r\n  Card,\r\n  CardContent,\r\n  CardActions,\r\n  Toolbar,\r\n  makeStyles,\r\n  Typography,\r\n  Paper,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  TextField,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport { PostContext } from \"../context/PostContext\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: \"center\",\r\n  },\r\n  title: {\r\n    padding: theme.spacing(2),\r\n    marginBottom: 16,\r\n    fontSize: 14,\r\n  },\r\n  card: {\r\n    maxWidth: 300,\r\n    margin: \"auto\",\r\n    transition: \"0.3s\",\r\n    boxShadow: \"0 8px 40px -12px rgba(0,0,0,0.3)\",\r\n    \"&:hover\": {\r\n      boxShadow: \"0 16px 70px -12.125px rgba(0,0,0,0.3)\",\r\n    },\r\n  },\r\n  media: {\r\n    paddingTop: \"56.25%\",\r\n  },\r\n  content: {\r\n    textAlign: \"left\",\r\n    padding: theme.spacing(3),\r\n  },\r\n  divider: {\r\n    margin: `${theme.spacing (3)}px 0`,\r\n  },\r\n  heading: {\r\n    fontWeight: \"bold\",\r\n  },\r\n  subheading: {\r\n    lineHeight: 1.8,\r\n  },\r\n}));\r\nconst PostDetails = () => {\r\n  const classes = useStyles();\r\n  const { post, searchpost, editpost, removepost, updatepost, getpost } =\r\n    useContext(PostContext);\r\n  const [selecteDelete, setSelecteDelete] = useState([]);\r\n  const [show, setShow] = useState(false);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const [selected, setSelected] = useState({\r\n    id: null,\r\n    title: \"\",\r\n    post: \"\",\r\n  });\r\n  const handleEdit = (post) => {\r\n    setSelected(post);\r\n    setShow(true);\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => setShow(false);\r\n\r\n  const handleDelete = (id) => {\r\n    setSelecteDelete(id);\r\n    removepost(id);\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setSelected({ ...selected, [name]: value });\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    updatepost(selected);\r\n    setShow(false);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12}>\r\n            {\" \"}\r\n            <AutoSearch />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid container spacing={3}>\r\n        \r\n        {post.length > 0\r\n          ? post.map((post) => (\r\n              <Grid item xs={3} key={post.id}>\r\n                {\" \"}\r\n                <Card className={classes.card} key={post.id}>\r\n                  <CardContent className={classes.content}>\r\n                    <CardContent>\r\n                      <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                        Title\r\n                      </Typography>\r\n                      <Typography color=\"secondary\">{post.title}</Typography>\r\n                      <Divider className={classes.divider}  />\r\n                      <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                        Body\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"primary\">\r\n                        {post.body}\r\n                      </Typography>\r\n                    </CardContent>\r\n                    <CardActions>\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={() => handleEdit(post)}\r\n                      >\r\n                        Edit\r\n                      </Button>\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        onClick={() => handleDelete(post.id)}\r\n                      >\r\n                        DELETE\r\n                      </Button>\r\n                    </CardActions>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n            ))\r\n          : \"\"}\r\n\r\n        {show ? (\r\n          <Dialog open={show}>\r\n            <DialogTitle>EditForm</DialogTitle>\r\n            <DialogContent>\r\n              <Grid container justify=\"center\" alignItems=\"center\" spacing={2}>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    id=\"outlined-basic\"\r\n                    label=\"Title\"\r\n                    type=\"text\"\r\n                    name=\"title\"\r\n                    autoComplete=\"title\"\r\n                    variant=\"outlined\"\r\n                    onChange={handleInputChange}\r\n                    value={selected.title}\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    id=\"outlined-basic\"\r\n                    label=\"Body\"\r\n                    type=\"text\"\r\n                    name=\"body\"\r\n                    autoComplete=\"title\"\r\n                    variant=\"outlined\"\r\n                    onChange={handleInputChange}\r\n                    value={selected.body}\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button\r\n                color=\"secondary\"\r\n                variant=\"contained\"\r\n                onClick={handleClose}\r\n              >\r\n                Close\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={handleUpdate}\r\n              >\r\n                Update\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostDetails;\r\n","import \"./App.css\";\n\nimport Navbar from \"./components/Navbar\";\nimport PostDetails from \"./components/PostDetails\";\nimport PostContextProvider from \"./context/PostContext\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PostContextProvider>\n           <Navbar/>\n        \n           <PostDetails />\n      </PostContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}